// Code generated by MockGen. DO NOT EDIT.
// Source: coins.go

// Package coins_mock is a generated GoMock package.
package coins_mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/iDevoid/bitsum/internal/constant/model"
	reflect "reflect"
)

// MockCoinsMemCache is a mock of CoinsMemCache interface
type MockCoinsMemCache struct {
	ctrl     *gomock.Controller
	recorder *MockCoinsMemCacheMockRecorder
}

// MockCoinsMemCacheMockRecorder is the mock recorder for MockCoinsMemCache
type MockCoinsMemCacheMockRecorder struct {
	mock *MockCoinsMemCache
}

// NewMockCoinsMemCache creates a new mock instance
func NewMockCoinsMemCache(ctrl *gomock.Controller) *MockCoinsMemCache {
	mock := &MockCoinsMemCache{ctrl: ctrl}
	mock.recorder = &MockCoinsMemCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoinsMemCache) EXPECT() *MockCoinsMemCacheMockRecorder {
	return m.recorder
}

// Increment mocks base method
func (m *MockCoinsMemCache) Increment(data *model.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment
func (mr *MockCoinsMemCacheMockRecorder) Increment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockCoinsMemCache)(nil).Increment), data)
}

// Decrement mocks base method
func (m *MockCoinsMemCache) Decrement(data *model.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrement", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrement indicates an expected call of Decrement
func (mr *MockCoinsMemCacheMockRecorder) Decrement(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrement", reflect.TypeOf((*MockCoinsMemCache)(nil).Decrement), data)
}

// History mocks base method
func (m *MockCoinsMemCache) History(data *model.FilterDate) ([]model.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", data)
	ret0, _ := ret[0].([]model.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History
func (mr *MockCoinsMemCacheMockRecorder) History(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockCoinsMemCache)(nil).History), data)
}

// Balance mocks base method
func (m *MockCoinsMemCache) Balance() (model.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance")
	ret0, _ := ret[0].(model.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance
func (mr *MockCoinsMemCacheMockRecorder) Balance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockCoinsMemCache)(nil).Balance))
}
