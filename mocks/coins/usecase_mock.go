// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package coins_mock is a generated GoMock package.
package coins_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iDevoid/bitsum/internal/constant/model"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Pay mocks base method
func (m *MockUsecase) Pay(ctx context.Context, data *model.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pay indicates an expected call of Pay
func (mr *MockUsecaseMockRecorder) Pay(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockUsecase)(nil).Pay), ctx, data)
}

// Receive mocks base method
func (m *MockUsecase) Receive(ctx context.Context, data *model.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive
func (mr *MockUsecaseMockRecorder) Receive(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockUsecase)(nil).Receive), ctx, data)
}

// HistoryTransaction mocks base method
func (m *MockUsecase) HistoryTransaction(ctx context.Context, data *model.FilterDate) ([]model.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryTransaction", ctx, data)
	ret0, _ := ret[0].([]model.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryTransaction indicates an expected call of HistoryTransaction
func (mr *MockUsecaseMockRecorder) HistoryTransaction(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryTransaction", reflect.TypeOf((*MockUsecase)(nil).HistoryTransaction), ctx, data)
}

// Balance mocks base method
func (m *MockUsecase) Balance(ctx context.Context) (model.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", ctx)
	ret0, _ := ret[0].(model.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance
func (mr *MockUsecaseMockRecorder) Balance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockUsecase)(nil).Balance), ctx)
}
